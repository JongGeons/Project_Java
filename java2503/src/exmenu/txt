package exmenu;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.*;

public class WeatherAPIClient {

    public static void main(String[] args) throws Exception {
        String serviceKey = "9AA719PkHP%2FL9samf6Tw%2BW7K%2FsloxojIIrx9yvPw2pejN75FzaN1GY0%2BuUl8LC9QIG3CFmxlwtmlSz6LVBGU2A%3D%3D";

        String nx = "63";  // 서울 역삼동 좌표값
        String ny = "125";

        String baseDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));
        String baseTime = getBaseTime();

        StringBuilder urlBuilder = new StringBuilder("http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtFcst");
        // URLEncoder.encode()는 특수문자 포함된 키 이름을 안전하게 URL 형식으로 바꿔줌 (예: 공백 → %20)
        urlBuilder.append("?").append(URLEncoder.encode("serviceKey","UTF-8")).append("=").append(serviceKey);
        urlBuilder.append("&").append(URLEncoder.encode("pageNo","UTF-8")).append("=1");
        urlBuilder.append("&").append(URLEncoder.encode("numOfRows","UTF-8")).append("=1000");
        urlBuilder.append("&").append(URLEncoder.encode("dataType","UTF-8")).append("=JSON");
        urlBuilder.append("&").append(URLEncoder.encode("base_date","UTF-8")).append("=").append(baseDate);
        urlBuilder.append("&").append(URLEncoder.encode("base_time","UTF-8")).append("=").append(baseTime);
        urlBuilder.append("&").append(URLEncoder.encode("nx","UTF-8")).append("=").append(nx);
        urlBuilder.append("&").append(URLEncoder.encode("ny","UTF-8")).append("=").append(ny);

        // 요청방식 GET
        URL url = new URL(urlBuilder.toString()); 
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");

        // 응답 스트림 열기 200 - 300 사이는 정상 응답처리 400, 500 등은 오류메세지 처리로 변경
        BufferedReader rd = new BufferedReader(new InputStreamReader(
            conn.getResponseCode() >= 200 && conn.getResponseCode() < 300 ?
            conn.getInputStream() : conn.getErrorStream()
        ));

        // 응답 본문읽기 
        StringBuilder sb = new StringBuilder(); // 응답 본문 읽기후 sb에 저장
        String line;
        while ((line = rd.readLine()) != null) sb.append(line);
        rd.close();
        conn.disconnect(); // 모두 읽으면 종료

        JsonElement root = JsonParser.parseString(sb.toString());
        JsonObject obj = root.getAsJsonObject()
            .getAsJsonObject("response")
            .getAsJsonObject("body")
            .getAsJsonObject("items");

        Map<String, String> dataMap = new HashMap<>();
        for (JsonElement itemEl : obj.getAsJsonArray("item")) {
            JsonObject it = itemEl.getAsJsonObject();
            String category = it.get("category").getAsString();
            if ("POP".equals(category) || "T1H".equals(category)) {
                dataMap.put(category, it.get("fcstValue").getAsString());
            }
        }

        System.out.printf("서울(기준 %s %s): 강수확률 POP=%s%%, 기온 T1H=%s°C%n",
            baseDate, baseTime, dataMap.getOrDefault("POP","N/A"), dataMap.getOrDefault("T1H","N/A"));
    }

    private static String getBaseTime() {
        LocalTime now = LocalTime.now();
        int hour = now.getHour();
        int minute = now.getMinute();
        if (minute < 45) hour = hour - 1;
        if (hour < 0) hour = 23;
        return String.format("%02d00", hour); // 정각 시간 뽑아오기 9:00 12:00 정각만
    }
}
